{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAkEA,aAlEA,IAAM,EAAS,IAET,EAAS,SAAS,eAAe,QACjC,EAAM,EAAO,WAAW,MAExB,EAAe,WAGb,IAAA,EAAS,EAAO,wBACtB,EAAO,MAAQ,EAAO,MAAQ,OAAO,iBACrC,EAAO,OAAS,EAAO,OAAS,OAAO,kBAGnC,EAAS,SACb,EACA,EACA,EACA,EACA,GAEA,EAAI,UAAY,EAChB,EAAI,YACJ,EAAI,IAAI,EAAG,EAAG,EAAG,EAAG,EAAI,KAAK,IAC7B,EAAI,QAGA,EAAO,WACX,EAAI,UAAY,qBAChB,EAAI,yBAA2B,WAC/B,EAAI,YACJ,EAAI,KAAK,EAAG,EAAG,EAAO,MAAO,EAAO,QACpC,EAAI,QAGA,EAAY,SAAC,EAAW,GACtB,IAAA,EAAe,OAAA,OAAA,KAAK,SAA1B,oBACA,EAAI,yBAA2B,UAC/B,EACE,EACA,EAAI,OAAO,iBACX,EAAI,OAAO,iBACX,EACA,IAIE,EAAU,SAAV,IAEJ,IACA,sBAAsB,IAGxB,OAAO,iBAAiB,SAAU,GAElC,EAAO,iBAAiB,YAAa,SAAA,GACnC,EAAU,EAAE,QAAS,EAAE,WAGzB,EAAO,iBAAiB,YAAa,SAAA,GAAI,IAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAEnB,IAAA,IAAkB,EAAlB,EAAA,EAAE,eAAgB,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAA3B,IAAA,EAA2B,EAAA,MACpC,EAAU,EAAM,QAAS,EAAM,UAHM,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,MAOzC,IACA,sBAAsB","file":"src.db29edaa.js","sourceRoot":"src","sourcesContent":["const RADIUS = 100;\n\nconst canvas = document.getElementById('main') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d')!;\n\nconst updateCanvas = () => {\n  // canvas width and height need to be set separately from css width and height.\n  // changing these clears the canvas\n  const bounds = canvas.getBoundingClientRect();\n  canvas.width = bounds.width * window.devicePixelRatio;\n  canvas.height = bounds.height * window.devicePixelRatio;\n};\n\nconst circle = (\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  r: number,\n  fillStyle: string,\n) => {\n  ctx.fillStyle = fillStyle;\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fill();\n};\n\nconst fade = () => {\n  ctx.fillStyle = 'rgb(90%, 90%, 90%)';\n  ctx.globalCompositeOperation = 'multiply';\n  ctx.beginPath();\n  ctx.rect(0, 0, canvas.width, canvas.height);\n  ctx.fill();\n};\n\nconst drawTouch = (x: number, y: number) => {\n  const color = `hsl(${Math.random()}turn, 100%, 50%)`;\n  ctx.globalCompositeOperation = 'lighter';\n  circle(\n    ctx,\n    x * window.devicePixelRatio,\n    y * window.devicePixelRatio,\n    RADIUS,\n    color,\n  );\n};\n\nconst animate = () => {\n  // TODO also blur\n  fade();\n  requestAnimationFrame(animate);\n};\n\nwindow.addEventListener('resize', updateCanvas);\n\ncanvas.addEventListener('mousemove', e => {\n  drawTouch(e.offsetX, e.offsetY);\n});\n\ncanvas.addEventListener('touchmove', e => {\n  // TODO touchstart.preventDefault? touch-action=none?\n  for (const touch of e.changedTouches) {\n    drawTouch(touch.clientX, touch.clientY);\n  }\n});\n\nupdateCanvas();\nrequestAnimationFrame(animate);\n"]}